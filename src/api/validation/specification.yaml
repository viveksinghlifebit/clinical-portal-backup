openapi: 3.0.3

info:
  title: REST API TEMPLATE
  version: 1.0.0
  description: Lifebit platform REST API template
servers:
  - url: http://localhost:3000
    description: REST API TEMPLATE

paths:
  /health:
    get:
      summary: Server health status
      operationId: getHealth
      tags:
        - health
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                required:
                  - status
    post:
      summary: Set server health status
      operationId: postHealth
      tags:
        - health
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: ['ok', 'down']
              required:
                - status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /clinical-portal/v1/access-control/user-roles:
    get:
      summary: Get users with roles associated within a team
      operationId: getUserRoles
      parameters:
        - $ref: '#/components/parameters/requiredTeamID'
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserRoles'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Create users with roles associated within a team
      operationId: deleteUserRoles
      parameters:
        - $ref: '#/components/parameters/requiredTeamID'
      requestBody:
        description: Request body for adding role to the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRolesOptionalInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create users with roles associated within a team
      operationId: createUserRole
      parameters:
        - $ref: '#/components/parameters/requiredTeamID'
      requestBody:
        description: Request body for adding role to the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRolesOptionalInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRoles'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update user roles associated within the team
      operationId: updateUserRoles
      parameters:
        - $ref: '#/components/parameters/requiredTeamID'
      requestBody:
        description: Request body for adding role to the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRolesInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRoles'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /clinical-portal/v1/access-control/roles/me:
    get:
      summary: Get user roles with permissions
      operationId: getMyUserRoles
      parameters:
        - $ref: '#/components/parameters/requiredTeamID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyUserRoles'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create user roles with a default permission
      operationId: createBaseUserRole
      parameters:
        - $ref: '#/components/parameters/requiredTeamID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyUserRoles'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /clinical-portal/v1/access-control/invited-role:
    post:
      summary: Create invited user with provided role
      operationId: inviteUserRole
      parameters:
        - $ref: '#/components/parameters/requiredTeamID'
      requestBody:
        description: Request body for adding role to the user
        required: true
        content:
          application/json:
            schema:
              type: array
              minItems: 1
              items:
                $ref: '#/components/schemas/InviteUserRolesInput'
      responses:
        '201':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /clinical-portal/v1/access-control/roles:
    post:
      summary: Create new roles for RBACPermissions
      operationId: createRole
      requestBody:
        description: Request body for adding role
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RBACRoles'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACRoles'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: Get roles list for RBACPermissions
      operationId: getRolesList
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/RBACRoles'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update existing roles for RBACPermissions
      operationId: updateRole
      requestBody:
        description: Request body for updating role
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RBACRoles'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACRoles'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete existing role for RBACPermissions
      operationId: deleteRole
      requestBody:
        description: Request body for deleting role
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - name
              properties:
                name:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  responses:
    ### General Errors ###
    BadRequest:
      description: The request could not be understood by the server due to bad syntax.
      content:
        application/json:
          ### Commented out for fixing https://app.zenhub.com/workspaces/lifebit-platform-5aa6276b1224bb03d13f0e82/issues/lifebit-ai/lifebit-platform/12220
          ### the reasons are still unknown, so this should be investigated further. It has little impact on the validation process, since it is
          ### related to an error message
          # schema:
          #   $ref: '#/components/schemas/ErrorResponseObject'
          example:
            message: The request could not be understood by the server due to bad syntax.
            statusCode: 400
            errorName: 'Bad Request'
            time: '1970-01-01T00:00:00Z'
    Unauthorized:
      description: The user lacks valid authentication credentials for the target resource.
      content:
        application/json:
          ### Commented out for fixing https://app.zenhub.com/workspaces/lifebit-platform-5aa6276b1224bb03d13f0e82/issues/lifebit-ai/lifebit-platform/12220
          ### the reasons are still unknown, so this should be investigated further. It has little impact on the validation process, since it is
          ### related to an error message
          # schema:
          #   $ref: '#/components/schemas/ErrorResponseObject'
          example:
            message: The user lacks valid authentication credentials for the target resource.
            statusCode: 401
            errorName: 'Unauthorized'
            time: '1970-01-01T00:00:00Z'
    Forbidden:
      description: The user might not have the necessary permissions for a resource.
      content:
        application/json:
          ### Commented out for fixing https://app.zenhub.com/workspaces/lifebit-platform-5aa6276b1224bb03d13f0e82/issues/lifebit-ai/lifebit-platform/12220
          ### the reasons are still unknown, so this should be investigated further. It has little impact on the validation process, since it is
          ### related to an error message
          # schema:
          #   $ref: '#/components/schemas/ErrorResponseObject'
          example:
            message: The user might not have the necessary permissions for a resource.
            statusCode: 403
            errorName: 'Forbidden'
            time: '1970-01-01T00:00:00Z'
    UnauthorizedUser:
      description: Current user access only
    UserNotFound:
      description: User not found
    NotFound:
      description: The resource was not found.
      content:
        application/json:
          ### Commented out for fixing https://app.zenhub.com/workspaces/lifebit-platform-5aa6276b1224bb03d13f0e82/issues/lifebit-ai/lifebit-platform/12220
          ### the reasons are still unknown, so this should be investigated further. It has little impact on the validation process, since it is
          ### related to an error message
          # schema:
          #   $ref: '#/components/schemas/ErrorResponseObject'
          example:
            message: The resource was not found.
            statusCode: 404
            errorName: 'NotFound'
            time: '1970-01-01T00:00:00Z'
    Conflict:
      description: The request could not be completed due to a conflict with the current state of the target resource.
      content:
        application/json:
          ### Commented out for fixing https://app.zenhub.com/workspaces/lifebit-platform-5aa6276b1224bb03d13f0e82/issues/lifebit-ai/lifebit-platform/12220
          ### the reasons are still unknown, so this should be investigated further. It has little impact on the validation process, since it is
          ### related to an error message
          # schema:
          #   $ref: '#/components/schemas/ErrorResponseObject'
          example:
            message: The request could not be completed due to a conflict with the current state of the target resource.
            statusCode: 409
            errorName: 'Conflict'
            time: '1970-01-01T00:00:00Z'
    InternalServerError:
      description: Internal Server Error.
      content:
        application/json:
          ### Commented out for fixing https://app.zenhub.com/workspaces/lifebit-platform-5aa6276b1224bb03d13f0e82/issues/lifebit-ai/lifebit-platform/12220
          ### the reasons are still unknown, so this should be investigated further. It has little impact on the validation process, since it is
          ### related to an error message
          # schema:
          #   $ref: '#/components/schemas/ErrorResponseObject'
          example:
            message: Internal Server Error
            statusCode: 500
            errorName: 'Conflict'
            time: '1970-01-01T00:00:00Z'
    BadGateway:
      description: Bad Gateway
    Unexpected:
      description: Unexpected error.
    ResourceNotFound:
      description: Resource not found

  parameters:
    pageSize:
      name: pageSize
      in: query
      description: Number of records to fetch
      required: false
      schema:
        type: number
    pageNumber:
      name: pageNumber
      in: query
      description: Offset for the records to fetch
      required: false
      schema:
        type: number
    requiredTeamID:
      name: teamId
      in: query
      description: Team ID
      required: true
      schema:
        type: string

  schemas:
    RBACRoles:
      type: object
      additionalProperties: false
      required:
        - name
        - displayName
      properties:
        name:
          type: string
        displayName:
          type: string
        permissions:
          $ref: '#/components/schemas/RBACPermissionsList'
    RBACPermissionsList:
      type: array
      items:
        $ref: '#/components/schemas/RBACPermission'
    MyUserRoles:
      type: object
      additionalProperties: true
      properties:
        roles:
          type: array
          items:
            type: object
            additionalProperties: true
            properties:
              name:
                type: string
              permissions:
                $ref: '#/components/schemas/RBACPermissionsList'
    RBACPermission:
      type: object
      additionalProperties: true
      required:
        - 'name'
        - 'access'
      properties:
        name:
          type: string
        access:
          type: object
          additionalProperties: true
          properties:
            read:
              type: boolean
            create:
              type: boolean
            update:
              type: boolean
            delete:
              type: boolean
    UserRolesInput:
      type: object
      additionalProperties: false
      required:
        - roles
      properties:
        email:
          $ref: '#/components/schemas/Email'
        userId:
          type: string
        roles:
          type: array
          items:
            type: string
          minItems: 1
    Pagination:
      type: object
      properties:
        pageSize:
          type: number
        pageNumber:
          type: number
    InviteUserRolesInput:
      type: object
      additionalProperties: false
      required:
        - email
        - roles
      properties:
        email:
          $ref: '#/components/schemas/Email'
        roles:
          type: array
          items:
            type: string
          minItems: 1
    UserRoles:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        email:
          $ref: '#/components/schemas/Email'
        name:
          type: string
        surname:
          type: string
        teamName:
          type: string
        roles:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              name:
                type: string
              displayName:
                type: string
    Email:
      type: string
      format: email
    UserRolesOptionalInput:
      type: object
      additionalProperties: false
      required:
        - userId
      properties:
        userId:
          type: string
        roles:
          type: array
          items:
            type: string
          minItems: 1
