responses:
  ### General Errors ###
  BadRequest:
    description: The request could not be understood by the server due to bad syntax.
    content:
      application/json:
        example:
          message: The request could not be understood by the server due to bad syntax.
          statusCode: 400
          errorName: 'Bad Request'
          time: '1970-01-01T00:00:00Z'
  Unauthorized:
    description: The user lacks valid authentication credentials for the target resource.
    content:
      application/json:
        example:
          message: The user lacks valid authentication credentials for the target resource.
          statusCode: 401
          errorName: 'Unauthorized'
          time: '1970-01-01T00:00:00Z'
  Forbidden:
    description: The user might not have the necessary permissions for a resource.
    content:
      application/json:
        example:
          message: The user might not have the necessary permissions for a resource.
          statusCode: 403
          errorName: 'Forbidden'
          time: '1970-01-01T00:00:00Z'
  UnauthorizedUser:
    description: Current user access only
  UserNotFound:
    description: User not found
  NotFound:
    description: The resource was not found.
    content:
      application/json:
        example:
          message: The resource was not found.
          statusCode: 404
          errorName: 'NotFound'
          time: '1970-01-01T00:00:00Z'
  Conflict:
    description: The request could not be completed due to a conflict with the current state of the target resource.
    content:
      application/json:
        example:
          message: The request could not be completed due to a conflict with the current state of the target resource.
          statusCode: 409
          errorName: 'Conflict'
          time: '1970-01-01T00:00:00Z'
  InternalServerError:
    description: Internal Server Error.
    content:
      application/json:
        example:
          message: Internal Server Error
          statusCode: 500
          errorName: 'Conflict'
          time: '1970-01-01T00:00:00Z'
  BadGateway:
    description: Bad Gateway
  Unexpected:
    description: Unexpected error.
  ResourceNotFound:
    description: Resource not found

parameters:
  term:
    name: term
    in: query
    description: term to serch
    required: true
    schema:
      type: string
  pageSize:
    name: pageSize
    in: query
    description: Number of records to fetch
    required: false
    schema:
      type: number
  pageNumber:
    name: pageNumber
    in: query
    description: Offset for the records to fetch
    required: false
    schema:
      type: number
  requiredTeamID:
    name: teamId
    in: query
    description: Team ID
    required: true
    schema:
      type: string
  optionalTeamID:
    name: teamId
    in: query
    description: Team ID
    required: false
    schema:
      type: string
  workgroupId:
    name: id
    in: path
    description: The workgroup id
    required: true
    schema:
      $ref: '#/schemas/IdType'

schemas:
  RBACRoles:
    type: object
    additionalProperties: false
    required:
      - name
      - displayName
    properties:
      name:
        type: string
      displayName:
        type: string
      permissions:
        $ref: '#/schemas/RBACPermissionsList'
  RBACPermissionsList:
    type: array
    items:
      $ref: '#/schemas/RBACPermission'
  MyUserRoles:
    type: object
    additionalProperties: true
    properties:
      roles:
        type: array
        items:
          type: object
          additionalProperties: true
          properties:
            name:
              type: string
            permissions:
              $ref: '#/schemas/RBACPermissionsList'
  RBACPermission:
    type: object
    additionalProperties: true
    required:
      - 'name'
      - 'access'
    properties:
      name:
        type: string
      access:
        type: object
        additionalProperties: true
        properties:
          read:
            type: boolean
          create:
            type: boolean
          update:
            type: boolean
          delete:
            type: boolean
  UserRolesInput:
    type: object
    additionalProperties: false
    required:
      - roles
    properties:
      email:
        $ref: '#/schemas/Email'
      userId:
        type: string
      roles:
        type: array
        items:
          type: string
        minItems: 1
  Pagination:
    type: object
    properties:
      pageSize:
        type: number
      pageNumber:
        type: number
  InviteUserRolesInput:
    type: object
    additionalProperties: false
    required:
      - email
      - roles
    properties:
      email:
        $ref: '#/schemas/Email'
      roles:
        type: array
        items:
          type: string
        minItems: 1
  UserRoles:
    type: object
    additionalProperties: false
    properties:
      id:
        type: string
      email:
        $ref: '#/schemas/Email'
      name:
        type: string
      surname:
        type: string
      teamName:
        type: string
      roles:
        type: array
        items:
          type: object
          additionalProperties: false
          properties:
            name:
              type: string
            displayName:
              type: string
  Email:
    type: string
    format: email
  UserRolesOptionalInput:
    type: object
    additionalProperties: false
    required:
      - userId
    properties:
      userId:
        type: string
      roles:
        type: array
        items:
          type: string
        minItems: 1
  WorkgroupCreateInput:
    type: object
    required:
      - name
    properties:
      name:
        type: string
  Workgroup:
    type: object
    properties:
      _id:
        $ref: '#/schemas/IdType'
      name:
        type: string
      team:
        $ref: '#/schemas/IdType'
      owner:
        $ref: '#/schemas/IdType'
      numberOfPatients:
        type: number
    required:
      - _id
      - name
      - team
      - owner
      - numberOfPatients
  IdType:
    oneOf:
      - type: string
      - $ref: '#/schemas/UUID'
  UUID:
    type: object
    format: uuid
  WorkgroupsSearchCriteria:
    type: object
    properties:
      criteria:
        type: array
        items:
          type: object
          properties:
            column:
              $ref: '#/schemas/FilterColumnType'
            columnHeader:
              type: string
            value:
              type: string
            values:
              type: array
              items:
                type: string
            contains:
              type: array
              items:
                type: string
            high:
              oneOf:
                - type: number
                - type: string
            low:
              oneOf:
                - type: number
                - type: string
  FilterColumnType:
    type: object
    properties:
      id:
        $ref: '#/schemas/FilterId'
      instance:
        type: string
      array:
        $ref: '#/schemas/ArrayType'
      value:
        oneOf:
          - type: string
          - type: integer
  FilterId:
    oneOf:
      - type: string
      - type: integer
  ArrayType:
    type: object
    properties:
      type:
        type: string
        enum: ['exact', 'min', 'max', 'avg', 'all']
  WorkgroupPatientCreateInput:
    type: object
    required:
      - workgroupName
      - patientId
      - description
    properties:
      workgroupName:
        type: string
      patientId:
        type: string
      description:
        type: string
  PatientWorkgroup:
    type: object
    required:
      - _id
      - patient
      - workgroup
    properties:
      _id:
        $ref: '#/schemas/IdType'
      markersDefinition:
        type: array
        items:
          type: object
          # TODO: to be reviewed
      igvFiles:
        type: array
        items:
          type: string
      associatedDiseasesWithTieredVariants:
        type: array
        items:
          $ref: '#/schemas/DiseasesWithTieredVariants'
      comparisonFilters:
        type: array
        items:
          type: object
      description:
        type: string
      markers:
        type: array
        items:
          $ref: '#/schemas/PatientMarkers'
      diseaseGene:
        type: object
      tierSNV:
        $ref: '#/schemas/TierData'
      patient:
        $ref: '#/schemas/Patient'
      fields:
        $ref: '#/schemas/PatientWorkgroupFieldArray'
  DiseasesWithTieredVariants:
    type: object
    properties:
      tier1:
        type: integer
      tier2:
        type: integer
      tier3:
        type: integer
      gene:
        type: string
      phenotype:
        type: string
        nullable: true
  PatientMarkers:
    type: object
    required:
      - _id
      - cn
      - location
    properties:
      _id:
        $ref: '#/schemas/UUID'
      cn:
        type: string
      location:
        type: string
  TierData:
    type: object
    properties:
      tier1:
        type: integer
      tier2:
        type: integer
      tier3:
        type: integer
  Patient:
    type: object
    additionalProperties: false
    required:
      - _id
      - i
      - externalID
      - externalIDType
      - status
      - name
      - surname
    properties:
      externalID:
        type: string
      externalIDType:
        type: string
        enum: [HKID, Passport]
      hospitalRef:
        type: string
      name:
        type: string
        nullable: true
      surname:
        type: string
        nullable: true
      chineseName:
        type: string
        nullable: true
      chineseSurname:
        type: string
        nullable: true
      dateOfBirth:
        $ref: '#/schemas/DateType'
      email:
        $ref: '#/schemas/NullableEmail'
      phoneNumber:
        $ref: '#/schemas/NullablePhoneNumber'
      addresses:
        type: array
        items:
          type: object
          additionalProperties: false
          properties:
            address1:
              type: string
            address2:
              type: string
            cityAndCountry:
              type: string
            area:
              type: string
      familyId:
        type: string
      _id:
        $ref: '#/schemas/IdType'
      i:
        $ref: '#/schemas/InternalID'
      status:
        type: string
        enum: [Drafted, Enrolled, Withdraw]
      subStatus:
        type: string
        enum: [PartiallyWithdrawn]
        nullable: true
      owner:
        oneOf:
          - type: string
          - $ref: '#/schemas/User'
      team:
        type: string
      consentForms:
        type: array
        items:
          $ref: '#/schemas/ConsentForm'
      sequencingLibrary:
        type: array
        items:
          $ref: '#/schemas/SampleSequencingLibraries'
      samples:
        type: array
        items:
          $ref: '#/schemas/PatientSample'
      images:
        type: array
        items:
          type: object
          properties:
            location:
              type: string
      reports:
        type: array
        items:
          type: object
          properties:
            location:
              type: string
      igvFiles:
        type: array
        items:
          type: string
      associatedDiseasesWithTieredVariants:
        type: array
        items:
          $ref: '#/schemas/DiseasesWithTieredVariants'
      diseaseGene:
        type: object
      nextsOfKin:
        type: array
        items:
          $ref: '#/schemas/PatientNextOfKin'
      phenotypes:
        type: array
        items:
          $ref: '#/schemas/PatientPhenotype'
      analysisEligibleTypes:
        type: array
        items:
          $ref: '#/schemas/SampleAnalysisTypes'
      analysisEligibleTypesOthers:
        type: string
      createdAt:
        $ref: '#/schemas/DateType'
      updatedAt:
        $ref: '#/schemas/DateType'
      updatedBy:
        oneOf:
          - type: string
          - $ref: '#/schemas/User'
      referringUsers:
        type: array
        nullable: true
        items:
          $ref: '#/schemas/PatientReferringUser'
  PatientWorkgroupFieldArray:
    type: array
    items:
      $ref: '#/schemas/PatientWorkgroupField'
  PatientWorkgroupFieldInput:
    type: object
    properties:
      filterId:
        $ref: '#/schemas/FilterId'
      instance:
        $ref: '#/schemas/StringArray'
      array:
        $ref: '#/schemas/StringArray'
  PatientWorkgroupField:
    allOf:
      - $ref: '#/schemas/PatientWorkgroupFieldInput'
      - type: object
        properties:
          readOnly:
            type: boolean
          label:
            type: string
          value:
            type: string
          instanceNames:
            $ref: '#/schemas/StringArray'
  StringArray:
    type: array
    items:
      type: string
  DateType:
    type: string
  NullableEmail:
    type: string
    nullable: true
    format: email
  NullablePhoneNumber:
    type: string
    nullable: true
    pattern: ^[0-9,-,+,(,)]*$
  InternalID:
    type: string
    pattern: "^['A-Z'][0-9]{7}$"
  User:
    type: object
    properties:
      name:
        type: string
      surname:
        type: string
      email:
        $ref: '#/schemas/Email'
      picture:
        type: string
  ConsentForm:
    type: object
    properties:
      url:
        type: string
      fileName:
        type: string
      consentType:
        type: string
      additionalFindings:
        type: boolean
      futureResearch:
        type: boolean
      signedAt:
        $ref: '#/schemas/DateType'
      minorSignedAt:
        $ref: '#/schemas/DateType'
      version:
        type: string
      createdAt:
        $ref: '#/schemas/DateType'
  SampleSequencingLibraries:
    type: object
    additionalProperties: true
    required:
      - labPortalID
      - sample
      - sequencingId
    properties:
      labPortalID:
        type: string
      sample:
        type: string
      sequencingId:
        type: string
  PatientSample:
    type: object
    properties:
      _id:
        type: string
      sampleId:
        type: string
      type:
        $ref: '#/schemas/PatientSampleType'
      date:
        $ref: '#/schemas/DateType'
      barcode:
        type: string
      igvFile:
        type: string
      owner:
        $ref: '#/schemas/UserBasic'
      i:
        type: string
      qcStatus:
        $ref: '#/schemas/PatientSampleQCStatus'
      qcStatusUpdateAt:
        $ref: '#/schemas/DateType'
      qcJobLink:
        type: string
      createdAt:
        $ref: '#/schemas/DateType'
      updatedAt:
        $ref: '#/schemas/DateType'
  PatientNextOfKin:
    type: object
    additionalProperties: false
    properties:
      name:
        type: string
      email:
        $ref: '#/schemas/NullableEmail'
      phoneNumber:
        $ref: '#/schemas/NullablePhoneNumber'
      addresses:
        type: array
        items:
          type: object
          additionalProperties: false
          properties:
            address1:
              type: string
            address2:
              type: string
            cityAndCountry:
              type: string
            area:
              type: string
      relationship:
        type: string
  PatientPhenotype:
    type: object
    required:
      - fieldId
      - instance
      - array
      - value
    properties:
      fieldId:
        type: number
      instance:
        type: string
      array:
        type: number
      value:
        type: string
      createdAt:
        $ref: '#/schemas/DateType'
      updatedAt:
        $ref: '#/schemas/DateType'
  SampleAnalysisTypes:
    enum: ['Solo', 'DuosPatientMother', 'DuosPatientFather', 'Trio', 'TumorNormalPaired', 'Others']
  PatientReferringUser:
    type: object
    properties:
      type:
        type: string
      name:
        type: string
  PatientSampleType:
    type: string
    enum:
      [
        'Blood',
        'Buccal swab',
        'Bone marrow',
        'Buffy coat',
        'Saliva',
        'Plasma',
        'FFPE tumor',
        'FFPE non-tumor',
        'Fresh/Frozen tumor',
        'Fresh/Frozen non-tumor',
        'Fine Needle',
        'Others'
      ]
  UserBasic:
    type: object
    additionalProperties: false
    required:
      - _id
      - name
      - surname
      - email
    properties:
      _id:
        $ref: '#/schemas/IdType'
      name:
        type: string
      surname:
        type: string
      email:
        type: string
      picture:
        type: string
  PatientSampleQCStatus:
    type: string
    enum: ['Passed', 'Failed']
  ArrayOfWorkgroups:
    type: array
    items:
      $ref: '#/schemas/Workgroup'
  WorkgroupPatientMarker:
    type: object
    properties:
      markers:
        $ref: '#/schemas/StringArray'
  ArrayOfPatientWorkgroup:
    type: array
    items:
      $ref: '#/schemas/PatientWorkgroup'
  ValidateWorkgroupPatientInput:
    type: object
    required:
      - workgroupName
      - patientId
    properties:
      workgroupName:
        type: string
      patientId:
        type: string
  ValidateWorkgroupPatientResponse:
    type: object
    required:
      - isValid
    properties:
      isValid:
        type: boolean
      message:
        type: string
